"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const lodash_1 = require("lodash");
const os_family_1 = __importDefault(require("os-family"));
const api_based_1 = __importDefault(require("../../api-based"));
const compiler_1 = __importDefault(require("../es-next/compiler"));
const typescript_configuration_1 = __importDefault(require("../../../../configuration/typescript-configuration"));
const RENAMED_DEPENDENCIES_MAP = new Map([['testcafe', api_based_1.default.EXPORTABLE_LIB_PATH]]);
let TypeScriptTestFileCompiler = /** @class */ (() => {
    class TypeScriptTestFileCompiler extends api_based_1.default {
        constructor(compilerOptions = {}) {
            super();
            const tsConfigPath = compilerOptions.typeScriptOptions ? compilerOptions.typeScriptOptions.tsConfigPath : null;
            this.tsConfig = new typescript_configuration_1.default(tsConfigPath);
        }
        static _normalizeFilename(filename) {
            filename = path_1.default.resolve(filename);
            if (os_family_1.default.win)
                filename = filename.toLowerCase();
            return filename;
        }
        static _getTSDefsPath() {
            return TypeScriptTestFileCompiler._normalizeFilename(path_1.default.resolve(__dirname, '../../../../../ts-defs/index.d.ts'));
        }
        static _reportErrors(diagnostics) {
            // NOTE: lazy load the compiler
            const ts = require('typescript');
            let errMsg = 'TypeScript compilation failed.\n';
            diagnostics.forEach(d => {
                const message = ts.flattenDiagnosticMessageText(d.messageText, '\n');
                const file = d.file;
                if (file && d.start !== void 0) {
                    const { line, character } = file.getLineAndCharacterOfPosition(d.start);
                    errMsg += `${file.fileName} (${line + 1}, ${character + 1}): `;
                }
                errMsg += `${message}\n`;
            });
            throw new Error(errMsg);
        }
        _compileCodeForTestFiles(testFilesInfo) {
            return this.tsConfig.init()
                .then(() => {
                return super._compileCodeForTestFiles(testFilesInfo);
            });
        }
        _compileFilesToCache(ts, filenames) {
            const opts = this.tsConfig.getOptions();
            const program = ts.createProgram([TypeScriptTestFileCompiler.tsDefsPath, ...filenames], opts);
            program.getSourceFiles().forEach(sourceFile => {
                // @ts-ignore A hack to allow import globally installed TestCafe in tests
                sourceFile.renamedDependencies = RENAMED_DEPENDENCIES_MAP;
            });
            const diagnostics = ts.getPreEmitDiagnostics(program);
            if (diagnostics.length)
                TypeScriptTestFileCompiler._reportErrors(diagnostics);
            // NOTE: The first argument of emit() is a source file to be compiled. If it's undefined, all files in
            // <program> will be compiled. <program> contains a file specified in createProgram() plus all its dependencies.
            // This mode is much faster than compiling files one-by-one, and it is used in the tsc CLI compiler.
            program.emit(void 0, (outputName, result, writeBOM, onError, sources) => {
                if (!sources)
                    return;
                const sourcePath = TypeScriptTestFileCompiler._normalizeFilename(sources[0].fileName);
                this.cache[sourcePath] = result;
            });
        }
        _precompileCode(testFilesInfo) {
            // NOTE: lazy load the compiler
            const ts = require('typescript');
            const filenames = testFilesInfo.map(({ filename }) => filename);
            const normalizedFilenames = filenames.map(filename => TypeScriptTestFileCompiler._normalizeFilename(filename));
            const normalizedFilenamesMap = lodash_1.zipObject(normalizedFilenames, filenames);
            const uncachedFiles = normalizedFilenames
                .filter(filename => filename !== TypeScriptTestFileCompiler.tsDefsPath && !this.cache[filename])
                .map(filename => normalizedFilenamesMap[filename]);
            if (uncachedFiles.length)
                this._compileFilesToCache(ts, uncachedFiles);
            return normalizedFilenames.map(filename => this.cache[filename]);
        }
        _getRequireCompilers() {
            return {
                '.ts': (code, filename) => this._compileCode(code, filename),
                '.js': (code, filename) => compiler_1.default.prototype._compileCode.call(this, code, filename)
            };
        }
        get canPrecompile() {
            return true;
        }
        getSupportedExtension() {
            return '.ts';
        }
    }
    TypeScriptTestFileCompiler.tsDefsPath = TypeScriptTestFileCompiler._getTSDefsPath();
    return TypeScriptTestFileCompiler;
})();
exports.default = TypeScriptTestFileCompiler;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,